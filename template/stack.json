{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Stack que cria um bucket S3, Lambda Function e permissões para integração.",

  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Fn::Sub": "s3-lambda-bucket-${AWS::StackName}" }
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": ["lambda.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "S3AccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetObject", "s3:PutObject"],
                  "Resource": [
                    { "Fn::Join": ["", [{ "Fn::GetAtt": ["S3Bucket", "Arn"] }, "/*"]] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Fn::Sub": "s3-lambda-processor-${AWS::StackName}" },
        "Runtime": "nodejs14.x",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
        "Timeout": 30,
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk');",
                "const s3 = new AWS.S3();",
                "",
                "exports.handler = async (event) => {",
                "  console.log('Event:', JSON.stringify(event, null, 2));",
                "  for (const record of event.Records || []) {",
                "    const bucket = record.s3.bucket.name;",
                "    const key = decodeURIComponent(record.s3.object.key.replace(/\\+/g, ' '));",
                "    try {",
                "      const res = await s3.getObject({ Bucket: bucket, Key: key }).promise();",
                "      const body = res.Body.toString('utf-8');",
                "      console.log(`Processing object ${key} from ${bucket} (length=${body.length})`);",
                "      const outKey = `processed/${key}`;",
                "      await s3.putObject({ Bucket: bucket, Key: outKey, Body: `Processed at ${new Date().toISOString()}\\n\\n${body}` }).promise();",
                "      console.log('Wrote processed file:', outKey);",
                "    } catch (err) {",
                "      console.error('Error processing object', err);",
                "      throw err;",
                "    }",
                "  }",
                "};"
              ]
            ]
          }
        }
      }
    },

    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": ["LambdaFunction", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["S3Bucket", "Arn"] }
      }
    }
  },

  "Outputs": {
    "BucketName": {
      "Description": "Nome do bucket criado",
      "Value": { "Ref": "S3Bucket" }
    },
    "LambdaFunctionArn": {
      "Description": "ARN da Lambda",
      "Value": { "Fn::GetAtt": ["LambdaFunction", "Arn"] }
    },
    "LambdaFunctionName": {
      "Description": "Nome da função Lambda",
      "Value": { "Ref": "LambdaFunction" }
    }
  }
}
